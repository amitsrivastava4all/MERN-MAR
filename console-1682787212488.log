console.log("Start ");
const pr = doWork();
console.log("Promise is ", pr);

function doWork(){
    const promise = new Promise((resolve, reject)=>{
        
    
    setTimeout(()=>{
        resolve("Promise Resolve ");
    },5000);
        });
    return promise;
}
VM857:1 Start 
VM857:3 Promise is  Promise {<pending>}
undefined
console.log("Start ");
const pr = doWork();
console.log("Promise is ", pr);
pr.then(data=>console.log("Data is ",data)).catch(err=>console.log("Error is ",err));
function doWork(){
    const promise = new Promise((resolve, reject)=>{
        
    
    setTimeout(()=>{
        resolve("Promise Resolve ");
    },5000);
        });
    return promise;
}
VM1137:1 Start 
VM1137:3 Promise is  Promise {<pending>}
Promise {<pending>}
VM1137:4 Data is  Promise Resolve 
console.log("Start ");
const pr = doWork();
console.log("Promise is ", pr);
pr.then(data=>console.log("Data is ",data)).catch(err=>console.log("Error is ",err));
function doWork(){
    const promise = new Promise((resolve, reject)=>{
        
    
    setTimeout(()=>{
        //resolve("Promise Resolve ");
        reject("Some Problem Occur ");
    },5000);
        });
    return promise;
}
VM1226:1 Start 
VM1226:3 Promise is  Promise {<pending>}
Promise {<pending>}
VM1226:4 Error is  Some Problem Occur 
function cube(num, time){
    const p = new Promise((resolve, reject)=>{
             setTimeout(()=>{
                if(num>=5){
                    reject("Number is too big for cube "+num);
                }
                 resolve(num**3);
    }, time);
    });
    return p;
   
}
undefined
Promise.all([cube(3,2000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2343:1 (3) [27, 64, 8]
Promise.all([cube(13,2000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2351:1 Error is  Number is too big for cube 13
Promise.allSettled([cube(13,12000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2385:1 (3) [{…}, {…}, {…}]
Promise.all([cube(13,12000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2402:1 Error is  Number is too big for cube 13
Promise.allSettled([cube(13,12000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2410:1 (3) [{…}, {…}, {…}]0: {status: 'rejected', reason: 'Number is too big for cube 13'}1: {status: 'fulfilled', value: 64}2: {status: 'fulfilled', value: 8}length: 3[[Prototype]]: Array(0)
Promise.race([cube(13,1000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2449:1 Error is  Number is too big for cube 13
Promise.race([cube(3,1000), cube(4,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2473:1 27
Promise.any([cube(13,1000), cube(14,5000), cube(2,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2512:1 8
Promise.any([cube(13,1000), cube(14,5000), cube(22,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2522:1 Error is  AggregateError: All promises were rejected
Promise.any([cube(3,1000), cube(2,5000), cube(3,8000)]).then(dataArr=>console.log(dataArr)).catch(err=>console.log("Error is ", err));
Promise {<pending>}
VM2560:1 27
async function total(){
    console.log("Starting Total ");
   const r =  await cube(3,3000) + await cube(4,4000) + await cube(2,10000);
    console.log("R is ",r);
    return r;
}
const p = total();
console.log(p);
p.then(data=>console.log(data)).catch(e=>console.log(e));
VM3504:2 Starting Total 
VM3504:8 Promise {<pending>}
Promise {<pending>}
VM3504:4 R is  99
VM3504:9 99
